### YamlMime:ManagedReference
items:
- uid: MaybeSharp.Extensions.NullableExtensions
  commentId: T:MaybeSharp.Extensions.NullableExtensions
  id: NullableExtensions
  parent: MaybeSharp.Extensions
  children:
  - MaybeSharp.Extensions.NullableExtensions.ToMaybe``1(System.Nullable{``0})
  langs:
  - csharp
  - vb
  name: NullableExtensions
  nameWithType: NullableExtensions
  fullName: MaybeSharp.Extensions.NullableExtensions
  type: Class
  source:
    id: NullableExtensions
    path: ''
    startLine: 1211
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp.Extensions
  summary: "\nProvides extensions to <see cref=\"!:Nullable&lt;T>\"></see> values for working with <xref href=\"MaybeSharp.Maybe%601\" data-throw-if-not-resolved=\"false\"></xref> types.\n"
  example: []
  syntax:
    content: public static class NullableExtensions
    content.vb: Public Module NullableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MaybeSharp.Extensions.NullableExtensions.ToMaybe``1(System.Nullable{``0})
  commentId: M:MaybeSharp.Extensions.NullableExtensions.ToMaybe``1(System.Nullable{``0})
  id: ToMaybe``1(System.Nullable{``0})
  isExtensionMethod: true
  parent: MaybeSharp.Extensions.NullableExtensions
  langs:
  - csharp
  - vb
  name: ToMaybe<T>(Nullable<T>)
  nameWithType: NullableExtensions.ToMaybe<T>(Nullable<T>)
  fullName: MaybeSharp.Extensions.NullableExtensions.ToMaybe<T>(System.Nullable<T>)
  type: Method
  source:
    id: ToMaybe
    path: ''
    startLine: 1219
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp.Extensions
  summary: "\nConverts a <see cref=\"!:Nullable&lt;T>\"></see> to a <xref href=\"MaybeSharp.Maybe%601\" data-throw-if-not-resolved=\"false\"></xref> value.\n"
  example: []
  syntax:
    content: 'public static Maybe<T> ToMaybe<T>(this T? source)where T : struct'
    parameters:
    - id: source
      type: System.Nullable{{T}}
      description: A <see cref="!:Nullable&lt;T>"></see> to be turned into a <xref href="MaybeSharp.Maybe%601" data-throw-if-not-resolved="false"></xref> instance.
    typeParameters:
    - id: T
      description: The type of value used in both the nullable and maybe instances.
    return:
      type: MaybeSharp.Maybe{{T}}
      description: A <xref href="MaybeSharp.Maybe%601" data-throw-if-not-resolved="false"></xref> instance, either an empty instance if <code data-dev-comment-type="paramref" class="paramref">source</code> is null, otherwise a non-empty instance containing the value from <code data-dev-comment-type="paramref" class="paramref">source</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToMaybe(Of T As Structure)(source As T?) As Maybe(Of T)
  overload: MaybeSharp.Extensions.NullableExtensions.ToMaybe*
  nameWithType.vb: NullableExtensions.ToMaybe(Of T)(Nullable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Extensions.NullableExtensions.ToMaybe(Of T)(System.Nullable(Of T))
  name.vb: ToMaybe(Of T)(Nullable(Of T))
references:
- uid: MaybeSharp.Maybe`1
  commentId: T:MaybeSharp.Maybe`1
  parent: MaybeSharp
  isExternal: false
  name: Maybe<T>
  nameWithType: Maybe<T>
  fullName: MaybeSharp.Maybe<T>
  nameWithType.vb: Maybe(Of T)
  fullName.vb: MaybeSharp.Maybe(Of T)
  name.vb: Maybe(Of T)
  spec.csharp:
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp.Extensions
  commentId: N:MaybeSharp.Extensions
  isExternal: false
  name: MaybeSharp.Extensions
  nameWithType: MaybeSharp.Extensions
  fullName: MaybeSharp.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp
  commentId: N:MaybeSharp
  isExternal: false
  name: MaybeSharp
  nameWithType: MaybeSharp
  fullName: MaybeSharp
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: MaybeSharp.Extensions.NullableExtensions.ToMaybe*
  commentId: Overload:MaybeSharp.Extensions.NullableExtensions.ToMaybe
  isExternal: false
  name: ToMaybe
  nameWithType: NullableExtensions.ToMaybe
  fullName: MaybeSharp.Extensions.NullableExtensions.ToMaybe
- uid: System.Nullable{{T}}
  commentId: T:System.Nullable{``0}
  parent: System
  definition: System.Nullable`1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp.Maybe{{T}}
  commentId: T:MaybeSharp.Maybe{``0}
  parent: MaybeSharp
  definition: MaybeSharp.Maybe`1
  name: Maybe<T>
  nameWithType: Maybe<T>
  fullName: MaybeSharp.Maybe<T>
  nameWithType.vb: Maybe(Of T)
  fullName.vb: MaybeSharp.Maybe(Of T)
  name.vb: Maybe(Of T)
  spec.csharp:
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
