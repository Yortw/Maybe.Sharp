### YamlMime:ManagedReference
items:
- uid: MaybeSharp.Maybe`1
  commentId: T:MaybeSharp.Maybe`1
  id: Maybe`1
  parent: MaybeSharp
  children:
  - MaybeSharp.Maybe`1.#ctor(`0)
  - MaybeSharp.Maybe`1.As``1
  - MaybeSharp.Maybe`1.Bind(Func{`0,MaybeSharp.Maybe{`0}})
  - MaybeSharp.Maybe`1.Bind``1(Func{`0,MaybeSharp.Maybe{``0}})
  - MaybeSharp.Maybe`1.Cast``1
  - MaybeSharp.Maybe`1.CompareTo(`0)
  - MaybeSharp.Maybe`1.CompareTo(MaybeSharp.Maybe{`0})
  - MaybeSharp.Maybe`1.CompareTo(System.Object)
  - MaybeSharp.Maybe`1.Equals(MaybeSharp.Maybe{`0})
  - MaybeSharp.Maybe`1.Equals(System.Object)
  - MaybeSharp.Maybe`1.GetHashCode
  - MaybeSharp.Maybe`1.HasValue
  - MaybeSharp.Maybe`1.IsEmpty
  - MaybeSharp.Maybe`1.Nothing
  - MaybeSharp.Maybe`1.op_Equality(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  - MaybeSharp.Maybe`1.op_Explicit(MaybeSharp.Maybe{`0})~`0
  - MaybeSharp.Maybe`1.op_GreaterThan(MaybeSharp.Maybe{`0},`0)
  - MaybeSharp.Maybe`1.op_GreaterThan(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  - MaybeSharp.Maybe`1.op_GreaterThanOrEqual(MaybeSharp.Maybe{`0},`0)
  - MaybeSharp.Maybe`1.op_GreaterThanOrEqual(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  - MaybeSharp.Maybe`1.op_Implicit(`0)~MaybeSharp.Maybe{`0}
  - MaybeSharp.Maybe`1.op_Inequality(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  - MaybeSharp.Maybe`1.op_LessThan(MaybeSharp.Maybe{`0},`0)
  - MaybeSharp.Maybe`1.op_LessThan(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  - MaybeSharp.Maybe`1.op_LessThanOrEqual(MaybeSharp.Maybe{`0},`0)
  - MaybeSharp.Maybe`1.op_LessThanOrEqual(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  - MaybeSharp.Maybe`1.ToString
  - MaybeSharp.Maybe`1.ToString(System.String,IFormatProvider)
  - MaybeSharp.Maybe`1.Value
  langs:
  - csharp
  - vb
  name: Maybe<T>
  nameWithType: Maybe<T>
  fullName: MaybeSharp.Maybe<T>
  type: Struct
  source:
    id: Maybe
    path: ''
    startLine: 205
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nRepresents a value that might be &apos;empty&apos; or a valid value.\n"
  example: []
  syntax:
    content: 'public struct Maybe<T> : IEquatable<Maybe<T>>, IFormattable, IComparable, IComparable<Maybe<T>>, IComparable<T>'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public Structure Maybe(Of T)
          Implements IEquatable(Of Maybe(Of T)), IFormattable, IComparable, IComparable(Of Maybe(Of T)), IComparable(Of T)
  implements:
  - IEquatable{MaybeSharp.Maybe`1}
  - IFormattable
  - IComparable
  - IComparable{MaybeSharp.Maybe`1}
  - IComparable{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  nameWithType.vb: Maybe(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: MaybeSharp.Maybe(Of T)
  name.vb: Maybe(Of T)
- uid: MaybeSharp.Maybe`1.Nothing
  commentId: F:MaybeSharp.Maybe`1.Nothing
  id: Nothing
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Nothing
  nameWithType: Maybe<T>.Nothing
  fullName: MaybeSharp.Maybe<T>.Nothing
  type: Field
  source:
    id: Nothing
    path: ''
    startLine: 224
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nRepresents an empty version of this maybe.\n"
  example: []
  syntax:
    content: public static readonly Maybe<T> Nothing
    return:
      type: MaybeSharp.Maybe`1
    content.vb: Public Shared ReadOnly Nothing As Maybe(Of T)
  nameWithType.vb: Maybe(Of T).Nothing
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: MaybeSharp.Maybe(Of T).Nothing
- uid: MaybeSharp.Maybe`1.#ctor(`0)
  commentId: M:MaybeSharp.Maybe`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Maybe(T)
  nameWithType: Maybe<T>.Maybe(T)
  fullName: MaybeSharp.Maybe<T>.Maybe(T)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 234
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nCreates an instance that represents the specified value.\n"
  remarks: "\n<p>If {T} is a &apos;nullable&apos; type (reference type or Nullable{T}) and <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is null, then an &apos;empty&apos; instance is returned. Otherwise a non-empty instance containing <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is returned. \nIf you want an empty instance of a non-nullable type use Maybe{T}.Nothing (preferred), or new Maybe{T}. New Maybe{T}(default(T)) will return a non-empty instance with the default value of that type.</p>\n"
  example: []
  syntax:
    content: public Maybe(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value represented by this instance.
    content.vb: Public Sub New(value As T)
  overload: MaybeSharp.Maybe`1.#ctor*
  nameWithType.vb: Maybe(Of T).Maybe(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).Maybe(T)
- uid: MaybeSharp.Maybe`1.IsEmpty
  commentId: P:MaybeSharp.Maybe`1.IsEmpty
  id: IsEmpty
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Maybe<T>.IsEmpty
  fullName: MaybeSharp.Maybe<T>.IsEmpty
  type: Property
  source:
    id: IsEmpty
    path: ''
    startLine: 244
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if this instance is empty.\n"
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: MaybeSharp.Maybe`1.IsEmpty*
  seealso:
  - linkId: MaybeSharp.Maybe`1.IsEmpty
    commentId: P:MaybeSharp.Maybe`1.IsEmpty
  nameWithType.vb: Maybe(Of T).IsEmpty
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MaybeSharp.Maybe(Of T).IsEmpty
- uid: MaybeSharp.Maybe`1.HasValue
  commentId: P:MaybeSharp.Maybe`1.HasValue
  id: HasValue
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: Maybe<T>.HasValue
  fullName: MaybeSharp.Maybe<T>.HasValue
  type: Property
  source:
    id: HasValue
    path: ''
    startLine: 254
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if this instance contains a valid, non-empty value.\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasValue As Boolean
  overload: MaybeSharp.Maybe`1.HasValue*
  seealso:
  - linkId: MaybeSharp.Maybe`1.Value
    commentId: P:MaybeSharp.Maybe`1.Value
  see:
  - linkId: MaybeSharp.Maybe`1.IsEmpty
    commentId: P:MaybeSharp.Maybe`1.IsEmpty
  nameWithType.vb: Maybe(Of T).HasValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MaybeSharp.Maybe(Of T).HasValue
- uid: MaybeSharp.Maybe`1.Value
  commentId: P:MaybeSharp.Maybe`1.Value
  id: Value
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Maybe<T>.Value
  fullName: MaybeSharp.Maybe<T>.Value
  type: Property
  source:
    id: Value
    path: ''
    startLine: 265
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nIf <xref href=\"MaybeSharp.Maybe%601.HasValue\" data-throw-if-not-resolved=\"false\"></xref> is true, returns the value contained by this instance, otherwise throws a <see cref=\"!:InvalidOperationException\"></see>.\n"
  example: []
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: MaybeSharp.Maybe`1.Value*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if this instance is &apos;empty&apos; and has no value to return.
  seealso:
  - linkId: MaybeSharp.Maybe`1.IsEmpty
    commentId: P:MaybeSharp.Maybe`1.IsEmpty
  - linkId: MaybeSharp.Maybe`1.HasValue
    commentId: P:MaybeSharp.Maybe`1.HasValue
  nameWithType.vb: Maybe(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MaybeSharp.Maybe(Of T).Value
- uid: MaybeSharp.Maybe`1.Bind(Func{`0,MaybeSharp.Maybe{`0}})
  commentId: M:MaybeSharp.Maybe`1.Bind(Func{`0,MaybeSharp.Maybe{`0}})
  id: Bind(Func{`0,MaybeSharp.Maybe{`0}})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Bind(Func<T, Maybe<T>>)
  nameWithType: Maybe<T>.Bind(Func<T, Maybe<T>>)
  fullName: MaybeSharp.Maybe<T>.Bind(Func<T, MaybeSharp.Maybe<T>>)
  type: Method
  source:
    id: Bind
    path: ''
    startLine: 279
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nIf this maybe is not empty, calls the specified function providing the value of this maybe and returns the result. If this maybe is nothing, returns an empty maybe.\n"
  example: []
  syntax:
    content: public Maybe<T> Bind(Func<T, Maybe<T>> func)
    parameters:
    - id: func
      type: Func{{T},MaybeSharp.Maybe`1}
      description: The function to call if this maybe is not empty.
    return:
      type: MaybeSharp.Maybe`1
      description: A Maybe{T}. Will be an empty maybe if this maybe is empty.
    content.vb: Public Function Bind(func As Func(Of T, Maybe(Of T))) As Maybe(Of T)
  overload: MaybeSharp.Maybe`1.Bind*
  nameWithType.vb: Maybe(Of T).Bind(Func(Of T, Maybe(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).Bind(Func(Of T, MaybeSharp.Maybe(Of T)))
  name.vb: Bind(Func(Of T, Maybe(Of T)))
- uid: MaybeSharp.Maybe`1.Bind``1(Func{`0,MaybeSharp.Maybe{``0}})
  commentId: M:MaybeSharp.Maybe`1.Bind``1(Func{`0,MaybeSharp.Maybe{``0}})
  id: Bind``1(Func{`0,MaybeSharp.Maybe{``0}})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Bind<TResult>(Func<T, Maybe<TResult>>)
  nameWithType: Maybe<T>.Bind<TResult>(Func<T, Maybe<TResult>>)
  fullName: MaybeSharp.Maybe<T>.Bind<TResult>(Func<T, MaybeSharp.Maybe<TResult>>)
  type: Method
  source:
    id: Bind
    path: ''
    startLine: 292
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nIf this maybe is not empty, calls the specified function providing the value of this maybe and returns the result. If this maybe is nothing, returns an empty maybe.\n"
  example: []
  syntax:
    content: public Maybe<TResult> Bind<TResult>(Func<T, Maybe<TResult>> func)
    parameters:
    - id: func
      type: Func{{T},MaybeSharp.Maybe{{TResult}}}
      description: The function to call if this maybe is not empty.
    typeParameters:
    - id: TResult
      description: The type of value returned from the provided function.
    return:
      type: MaybeSharp.Maybe{{TResult}}
      description: A Maybe{TResult}. Will be an empty maybe if this maybe is empty.
    content.vb: Public Function Bind(Of TResult)(func As Func(Of T, Maybe(Of TResult))) As Maybe(Of TResult)
  overload: MaybeSharp.Maybe`1.Bind*
  nameWithType.vb: Maybe(Of T).Bind(Of TResult)(Func(Of T, Maybe(Of TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).Bind(Of TResult)(Func(Of T, MaybeSharp.Maybe(Of TResult)))
  name.vb: Bind(Of TResult)(Func(Of T, Maybe(Of TResult)))
- uid: MaybeSharp.Maybe`1.Cast``1
  commentId: M:MaybeSharp.Maybe`1.Cast``1
  id: Cast``1
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Cast<TResult>()
  nameWithType: Maybe<T>.Cast<TResult>()
  fullName: MaybeSharp.Maybe<T>.Cast<TResult>()
  type: Method
  source:
    id: Cast
    path: ''
    startLine: 304
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nIf this maybe is empty, returns an empty Maybe{TResult}. If this maybe is not empty, casts it&apos;s value to TResult and returns a new maybe containing the result. If the cast fails, an empty Maybe{TResult} is returned.\n"
  example: []
  syntax:
    content: public Maybe<TResult> Cast<TResult>()
    typeParameters:
    - id: TResult
      description: The type to cast to.
    return:
      type: MaybeSharp.Maybe{{TResult}}
      description: A Maybe{TResult} instance.
    content.vb: Public Function Cast(Of TResult) As Maybe(Of TResult)
  overload: MaybeSharp.Maybe`1.Cast*
  nameWithType.vb: Maybe(Of T).Cast(Of TResult)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
- uid: MaybeSharp.Maybe`1.As``1
  commentId: M:MaybeSharp.Maybe`1.As``1
  id: As``1
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: As<TResult>()
  nameWithType: Maybe<T>.As<TResult>()
  fullName: MaybeSharp.Maybe<T>.As<TResult>()
  type: Method
  source:
    id: As
    path: ''
    startLine: 323
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nIf this maybe is empty, returns an empty Maybe{TResult}. If this maybe is not empty, use the as keyword to convert it&apos;s value to TResult and returns a new maybe containing the result.\n"
  example: []
  syntax:
    content: 'public Maybe<TResult> As<TResult>()where TResult : class'
    typeParameters:
    - id: TResult
      description: The type to cast to.
    return:
      type: MaybeSharp.Maybe{{TResult}}
      description: A Maybe{TResult} instance.
    content.vb: Public Function As(Of TResult As Class) As Maybe(Of TResult)
  overload: MaybeSharp.Maybe`1.As*
  nameWithType.vb: Maybe(Of T).As(Of TResult)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).As(Of TResult)()
  name.vb: As(Of TResult)()
- uid: MaybeSharp.Maybe`1.ToString
  commentId: M:MaybeSharp.Maybe`1.ToString
  id: ToString
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Maybe<T>.ToString()
  fullName: MaybeSharp.Maybe<T>.ToString()
  type: Method
  source:
    id: ToString
    path: ''
    startLine: 338
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns the string &lt;nothing> if <xref href=\"MaybeSharp.Maybe%601.IsEmpty\" data-throw-if-not-resolved=\"false\"></xref> is true, otherwise returns the result of the ToString method of the inner <xref href=\"MaybeSharp.Maybe%601.Value\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: MaybeSharp.Maybe`1.ToString*
  nameWithType.vb: Maybe(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: MaybeSharp.Maybe(Of T).ToString()
- uid: MaybeSharp.Maybe`1.GetHashCode
  commentId: M:MaybeSharp.Maybe`1.GetHashCode
  id: GetHashCode
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Maybe<T>.GetHashCode()
  fullName: MaybeSharp.Maybe<T>.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: ''
    startLine: 349
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns the hashcode for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A integer that is the hashcode for this instance.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: MaybeSharp.Maybe`1.GetHashCode*
  nameWithType.vb: Maybe(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: MaybeSharp.Maybe(Of T).GetHashCode()
- uid: MaybeSharp.Maybe`1.Equals(System.Object)
  commentId: M:MaybeSharp.Maybe`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Maybe<T>.Equals(Object)
  fullName: MaybeSharp.Maybe<T>.Equals(System.Object)
  type: Method
  source:
    id: Equals
    path: ''
    startLine: 363
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nPerforms an equality check.\n"
  remarks: <p>If <code data-dev-comment-type="paramref" class="paramref">obj</code> is not an instance of this Maybe{T} type then the result is false, otherwise the result of <xref href="MaybeSharp.Maybe%601.Equals(MaybeSharp.Maybe%7b%600%7d)" data-throw-if-not-resolved="false"></xref> is returned.</p>
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The value to compare to.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">obj</code> is considered equal to this instance.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: MaybeSharp.Maybe`1.Equals*
  nameWithType.vb: Maybe(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: MaybeSharp.Maybe(Of T).Equals(System.Object)
- uid: MaybeSharp.Maybe`1.Equals(MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.Equals(MaybeSharp.Maybe{`0})
  id: Equals(MaybeSharp.Maybe{`0})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Equals(Maybe<T>)
  nameWithType: Maybe<T>.Equals(Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.Equals(MaybeSharp.Maybe<T>)
  type: Method
  source:
    id: Equals
    path: ''
    startLine: 379
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nPerforms an equality check.\n"
  example: []
  syntax:
    content: public bool Equals(Maybe<T> other)
    parameters:
    - id: other
      type: MaybeSharp.Maybe`1
      description: The instance to compare to.
    return:
      type: System.Boolean
      description: True if the values are considered equal, otherwise false.
    content.vb: Public Function Equals(other As Maybe(Of T)) As Boolean
  overload: MaybeSharp.Maybe`1.Equals*
  nameWithType.vb: Maybe(Of T).Equals(Maybe(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).Equals(MaybeSharp.Maybe(Of T))
  name.vb: Equals(Maybe(Of T))
- uid: MaybeSharp.Maybe`1.ToString(System.String,IFormatProvider)
  commentId: M:MaybeSharp.Maybe`1.ToString(System.String,IFormatProvider)
  id: ToString(System.String,IFormatProvider)
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  nameWithType: Maybe<T>.ToString(String, IFormatProvider)
  fullName: MaybeSharp.Maybe<T>.ToString(System.String, IFormatProvider)
  type: Method
  source:
    id: ToString
    path: ''
    startLine: 397
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nFormats the value of the current instance using the specified format.\n"
  remarks: "\n<p>If the instance is empty or the inner value does not support <see cref=\"!:IFormattable\"></see> then returns the same result as <xref href=\"MaybeSharp.Maybe%601.ToString\" data-throw-if-not-resolved=\"false\"></xref>, otherwise returns the formatted string of the inner value.</p>\n"
  example: []
  syntax:
    content: public string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type: System.String
      description: The format string to use.
    - id: formatProvider
      type: IFormatProvider
      description: A format provider instance to use.
    return:
      type: System.String
      description: A string containing the formatted value.
    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String
  overload: MaybeSharp.Maybe`1.ToString*
  nameWithType.vb: Maybe(Of T).ToString(String, IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).ToString(System.String, IFormatProvider)
- uid: MaybeSharp.Maybe`1.CompareTo(System.Object)
  commentId: M:MaybeSharp.Maybe`1.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: Maybe<T>.CompareTo(Object)
  fullName: MaybeSharp.Maybe<T>.CompareTo(System.Object)
  type: Method
  source:
    id: CompareTo
    path: ''
    startLine: 415
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nCompares this instance to the value specified.\n"
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The value to compare to.
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: MaybeSharp.Maybe`1.CompareTo*
  nameWithType.vb: Maybe(Of T).CompareTo(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).CompareTo(System.Object)
- uid: MaybeSharp.Maybe`1.CompareTo(`0)
  commentId: M:MaybeSharp.Maybe`1.CompareTo(`0)
  id: CompareTo(`0)
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: CompareTo(T)
  nameWithType: Maybe<T>.CompareTo(T)
  fullName: MaybeSharp.Maybe<T>.CompareTo(T)
  type: Method
  source:
    id: CompareTo
    path: ''
    startLine: 436
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nCompares this instance to a value of {T}.\n"
  remarks: "\n<p>If this instance is empty, then it is considered &apos;less than&apos; <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>. Otherwise Comparer{T}.Default is used to compare this instance&apos;s inner value to <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code>.</p>\n"
  example: []
  syntax:
    content: public int CompareTo(T other)
    parameters:
    - id: other
      type: '{T}'
      description: The value to compare to.
    return:
      type: System.Int32
      description: -1 if this is less than other, 0 if this is equal to other, or 1 if this is greater than other.
    content.vb: Public Function CompareTo(other As T) As Integer
  overload: MaybeSharp.Maybe`1.CompareTo*
  nameWithType.vb: Maybe(Of T).CompareTo(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).CompareTo(T)
- uid: MaybeSharp.Maybe`1.CompareTo(MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.CompareTo(MaybeSharp.Maybe{`0})
  id: CompareTo(MaybeSharp.Maybe{`0})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: CompareTo(Maybe<T>)
  nameWithType: Maybe<T>.CompareTo(Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.CompareTo(MaybeSharp.Maybe<T>)
  type: Method
  source:
    id: CompareTo
    path: ''
    startLine: 451
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nCompares this instance to another instance of Maybe{T}.\n"
  example: []
  syntax:
    content: public int CompareTo(Maybe<T> other)
    parameters:
    - id: other
      type: MaybeSharp.Maybe`1
      description: Another <xref href="MaybeSharp.Maybe%601" data-throw-if-not-resolved="false"></xref> to compare this instance with.
    return:
      type: System.Int32
      description: -1 if this is less than other, 0 if this is equal to other, or 1 if this is greater than other.
    content.vb: Public Function CompareTo(other As Maybe(Of T)) As Integer
  overload: MaybeSharp.Maybe`1.CompareTo*
  nameWithType.vb: Maybe(Of T).CompareTo(Maybe(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MaybeSharp.Maybe(Of T).CompareTo(MaybeSharp.Maybe(Of T))
  name.vb: CompareTo(Maybe(Of T))
- uid: MaybeSharp.Maybe`1.op_Equality(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.op_Equality(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  id: op_Equality(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Equality(Maybe<T>, Maybe<T>)
  nameWithType: Maybe<T>.Equality(Maybe<T>, Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.Equality(MaybeSharp.Maybe<T>, MaybeSharp.Maybe<T>)
  type: Operator
  source:
    id: op_Equality
    path: ''
    startLine: 515
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nPerforms equality checking on Maybe{T} instances.\n"
  remarks: Returns true if both instances are &apos;empty&apos;. Returns false is one instance is empty and the other is not. Otherwise returns the result of EqualityComparer{T}.Default.Equals for the inner values of the maybe instances.
  example: []
  syntax:
    content: public static bool operator ==(Maybe<T> m1, Maybe<T> m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    return:
      type: System.Boolean
      description: True if the instances are equal, otherwise false.
    content.vb: Public Shared Operator =(m1 As Maybe(Of T), m2 As Maybe(Of T)) As Boolean
  overload: MaybeSharp.Maybe`1.op_Equality*
  nameWithType.vb: Maybe(Of T).Equality(Maybe(Of T), Maybe(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).Equality(MaybeSharp.Maybe(Of T), MaybeSharp.Maybe(Of T))
  name.vb: Equality(Maybe(Of T), Maybe(Of T))
- uid: MaybeSharp.Maybe`1.op_Inequality(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.op_Inequality(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  id: op_Inequality(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Inequality(Maybe<T>, Maybe<T>)
  nameWithType: Maybe<T>.Inequality(Maybe<T>, Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.Inequality(MaybeSharp.Maybe<T>, MaybeSharp.Maybe<T>)
  type: Operator
  source:
    id: op_Inequality
    path: ''
    startLine: 530
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nPerforms inequality checking on Maybe{T} instances.\n"
  remarks: Inverts the result of an == comparison.
  example: []
  syntax:
    content: public static bool operator !=(Maybe<T> m1, Maybe<T> m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    return:
      type: System.Boolean
      description: True if the instances are not equal, otherwise false.
    content.vb: Public Shared Operator <>(m1 As Maybe(Of T), m2 As Maybe(Of T)) As Boolean
  overload: MaybeSharp.Maybe`1.op_Inequality*
  nameWithType.vb: Maybe(Of T).Inequality(Maybe(Of T), Maybe(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).Inequality(MaybeSharp.Maybe(Of T), MaybeSharp.Maybe(Of T))
  name.vb: Inequality(Maybe(Of T), Maybe(Of T))
- uid: MaybeSharp.Maybe`1.op_GreaterThan(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.op_GreaterThan(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  id: op_GreaterThan(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: GreaterThan(Maybe<T>, Maybe<T>)
  nameWithType: Maybe<T>.GreaterThan(Maybe<T>, Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.GreaterThan(MaybeSharp.Maybe<T>, MaybeSharp.Maybe<T>)
  type: Operator
  source:
    id: op_GreaterThan
    path: ''
    startLine: 546
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">m1</code> is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">m2</code>.\n"
  remarks: An empty instance is considered the &apos;lowest possible value&apos; and will never be greater than anything else.
  example: []
  syntax:
    content: public static bool operator>(Maybe<T> m1, Maybe<T> m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">m1</code> is greater/larger than <code data-dev-comment-type="paramref" class="paramref">m2</code>.
    content.vb: Public Shared Operator>(m1 As Maybe(Of T), m2 As Maybe(Of T)) As Boolean
  overload: MaybeSharp.Maybe`1.op_GreaterThan*
  nameWithType.vb: Maybe(Of T).GreaterThan(Maybe(Of T), Maybe(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).GreaterThan(MaybeSharp.Maybe(Of T), MaybeSharp.Maybe(Of T))
  name.vb: GreaterThan(Maybe(Of T), Maybe(Of T))
- uid: MaybeSharp.Maybe`1.op_LessThan(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.op_LessThan(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  id: op_LessThan(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: LessThan(Maybe<T>, Maybe<T>)
  nameWithType: Maybe<T>.LessThan(Maybe<T>, Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.LessThan(MaybeSharp.Maybe<T>, MaybeSharp.Maybe<T>)
  type: Operator
  source:
    id: op_LessThan
    path: ''
    startLine: 560
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">m1</code> is less than <code data-dev-comment-type=\"paramref\" class=\"paramref\">m2</code>.\n"
  remarks: An empty instance is considered the &apos;lowest possible value&apos; and will always be lower than anything else.
  example: []
  syntax:
    content: public static bool operator <(Maybe<T> m1, Maybe<T> m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">m1</code> is lower/lesser than <code data-dev-comment-type="paramref" class="paramref">m2</code>.
    content.vb: Public Shared Operator <(m1 As Maybe(Of T), m2 As Maybe(Of T)) As Boolean
  overload: MaybeSharp.Maybe`1.op_LessThan*
  nameWithType.vb: Maybe(Of T).LessThan(Maybe(Of T), Maybe(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).LessThan(MaybeSharp.Maybe(Of T), MaybeSharp.Maybe(Of T))
  name.vb: LessThan(Maybe(Of T), Maybe(Of T))
- uid: MaybeSharp.Maybe`1.op_GreaterThanOrEqual(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.op_GreaterThanOrEqual(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  id: op_GreaterThanOrEqual(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Maybe<T>, Maybe<T>)
  nameWithType: Maybe<T>.GreaterThanOrEqual(Maybe<T>, Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.GreaterThanOrEqual(MaybeSharp.Maybe<T>, MaybeSharp.Maybe<T>)
  type: Operator
  source:
    id: op_GreaterThanOrEqual
    path: ''
    startLine: 574
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">m1</code> is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">m2</code>.\n"
  remarks: An empty instance is considered the &apos;lowest possible value&apos; and will never be greater than anything else.
  example: []
  syntax:
    content: public static bool operator >=(Maybe<T> m1, Maybe<T> m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">m1</code> is greater/larger than <code data-dev-comment-type="paramref" class="paramref">m2</code>.
    content.vb: Public Shared Operator >=(m1 As Maybe(Of T), m2 As Maybe(Of T)) As Boolean
  overload: MaybeSharp.Maybe`1.op_GreaterThanOrEqual*
  nameWithType.vb: Maybe(Of T).GreaterThanOrEqual(Maybe(Of T), Maybe(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).GreaterThanOrEqual(MaybeSharp.Maybe(Of T), MaybeSharp.Maybe(Of T))
  name.vb: GreaterThanOrEqual(Maybe(Of T), Maybe(Of T))
- uid: MaybeSharp.Maybe`1.op_LessThanOrEqual(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.op_LessThanOrEqual(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  id: op_LessThanOrEqual(MaybeSharp.Maybe{`0},MaybeSharp.Maybe{`0})
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Maybe<T>, Maybe<T>)
  nameWithType: Maybe<T>.LessThanOrEqual(Maybe<T>, Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.LessThanOrEqual(MaybeSharp.Maybe<T>, MaybeSharp.Maybe<T>)
  type: Operator
  source:
    id: op_LessThanOrEqual
    path: ''
    startLine: 588
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">m1</code> is less than <code data-dev-comment-type=\"paramref\" class=\"paramref\">m2</code>.\n"
  remarks: An empty instance is considered the &apos;lowest possible value&apos; and will always be lower than anything else.
  example: []
  syntax:
    content: public static bool operator <=(Maybe<T> m1, Maybe<T> m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">m1</code> is lower/lesser than <code data-dev-comment-type="paramref" class="paramref">m2</code>.
    content.vb: Public Shared Operator <=(m1 As Maybe(Of T), m2 As Maybe(Of T)) As Boolean
  overload: MaybeSharp.Maybe`1.op_LessThanOrEqual*
  nameWithType.vb: Maybe(Of T).LessThanOrEqual(Maybe(Of T), Maybe(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).LessThanOrEqual(MaybeSharp.Maybe(Of T), MaybeSharp.Maybe(Of T))
  name.vb: LessThanOrEqual(Maybe(Of T), Maybe(Of T))
- uid: MaybeSharp.Maybe`1.op_LessThan(MaybeSharp.Maybe{`0},`0)
  commentId: M:MaybeSharp.Maybe`1.op_LessThan(MaybeSharp.Maybe{`0},`0)
  id: op_LessThan(MaybeSharp.Maybe{`0},`0)
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: LessThan(Maybe<T>, T)
  nameWithType: Maybe<T>.LessThan(Maybe<T>, T)
  fullName: MaybeSharp.Maybe<T>.LessThan(MaybeSharp.Maybe<T>, T)
  type: Operator
  source:
    id: op_LessThan
    path: ''
    startLine: 606
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">m1</code> is less than <code data-dev-comment-type=\"paramref\" class=\"paramref\">m2</code>.\n"
  remarks: An empty instance is considered the &apos;lowest possible value&apos; and will always be lower than anything else.
  example: []
  syntax:
    content: public static bool operator <(Maybe<T> m1, T m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: '{T}'
      description: A T instance.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">m1</code> is lower/lesser than <code data-dev-comment-type="paramref" class="paramref">m2</code>.
    content.vb: Public Shared Operator <(m1 As Maybe(Of T), m2 As T) As Boolean
  overload: MaybeSharp.Maybe`1.op_LessThan*
  nameWithType.vb: Maybe(Of T).LessThan(Maybe(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).LessThan(MaybeSharp.Maybe(Of T), T)
  name.vb: LessThan(Maybe(Of T), T)
- uid: MaybeSharp.Maybe`1.op_GreaterThan(MaybeSharp.Maybe{`0},`0)
  commentId: M:MaybeSharp.Maybe`1.op_GreaterThan(MaybeSharp.Maybe{`0},`0)
  id: op_GreaterThan(MaybeSharp.Maybe{`0},`0)
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: GreaterThan(Maybe<T>, T)
  nameWithType: Maybe<T>.GreaterThan(Maybe<T>, T)
  fullName: MaybeSharp.Maybe<T>.GreaterThan(MaybeSharp.Maybe<T>, T)
  type: Operator
  source:
    id: op_GreaterThan
    path: ''
    startLine: 618
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">m1</code> is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">m2</code>.\n"
  remarks: An empty instance is considered the &apos;lowest possible value&apos; and will always be lower than anything else.
  example: []
  syntax:
    content: public static bool operator>(Maybe<T> m1, T m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: '{T}'
      description: A T instance.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">m1</code> is lower/lesser than <code data-dev-comment-type="paramref" class="paramref">m2</code>.
    content.vb: Public Shared Operator>(m1 As Maybe(Of T), m2 As T) As Boolean
  overload: MaybeSharp.Maybe`1.op_GreaterThan*
  nameWithType.vb: Maybe(Of T).GreaterThan(Maybe(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).GreaterThan(MaybeSharp.Maybe(Of T), T)
  name.vb: GreaterThan(Maybe(Of T), T)
- uid: MaybeSharp.Maybe`1.op_LessThanOrEqual(MaybeSharp.Maybe{`0},`0)
  commentId: M:MaybeSharp.Maybe`1.op_LessThanOrEqual(MaybeSharp.Maybe{`0},`0)
  id: op_LessThanOrEqual(MaybeSharp.Maybe{`0},`0)
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Maybe<T>, T)
  nameWithType: Maybe<T>.LessThanOrEqual(Maybe<T>, T)
  fullName: MaybeSharp.Maybe<T>.LessThanOrEqual(MaybeSharp.Maybe<T>, T)
  type: Operator
  source:
    id: op_LessThanOrEqual
    path: ''
    startLine: 630
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">m1</code> is less than <code data-dev-comment-type=\"paramref\" class=\"paramref\">m2</code>.\n"
  remarks: An empty instance is considered the &apos;lowest possible value&apos; and will always be lower than anything else.
  example: []
  syntax:
    content: public static bool operator <=(Maybe<T> m1, T m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: '{T}'
      description: A T instance.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">m1</code> is lower/lesser than <code data-dev-comment-type="paramref" class="paramref">m2</code>.
    content.vb: Public Shared Operator <=(m1 As Maybe(Of T), m2 As T) As Boolean
  overload: MaybeSharp.Maybe`1.op_LessThanOrEqual*
  nameWithType.vb: Maybe(Of T).LessThanOrEqual(Maybe(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).LessThanOrEqual(MaybeSharp.Maybe(Of T), T)
  name.vb: LessThanOrEqual(Maybe(Of T), T)
- uid: MaybeSharp.Maybe`1.op_GreaterThanOrEqual(MaybeSharp.Maybe{`0},`0)
  commentId: M:MaybeSharp.Maybe`1.op_GreaterThanOrEqual(MaybeSharp.Maybe{`0},`0)
  id: op_GreaterThanOrEqual(MaybeSharp.Maybe{`0},`0)
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Maybe<T>, T)
  nameWithType: Maybe<T>.GreaterThanOrEqual(Maybe<T>, T)
  fullName: MaybeSharp.Maybe<T>.GreaterThanOrEqual(MaybeSharp.Maybe<T>, T)
  type: Operator
  source:
    id: op_GreaterThanOrEqual
    path: ''
    startLine: 642
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">m1</code> is greater than <code data-dev-comment-type=\"paramref\" class=\"paramref\">m2</code>.\n"
  remarks: An empty instance is considered the &apos;lowest possible value&apos; and will always be lower than anything else.
  example: []
  syntax:
    content: public static bool operator >=(Maybe<T> m1, T m2)
    parameters:
    - id: m1
      type: MaybeSharp.Maybe`1
      description: A Maybe{T} instance.
    - id: m2
      type: '{T}'
      description: A T instance.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">m1</code> is lower/lesser than <code data-dev-comment-type="paramref" class="paramref">m2</code>.
    content.vb: Public Shared Operator >=(m1 As Maybe(Of T), m2 As T) As Boolean
  overload: MaybeSharp.Maybe`1.op_GreaterThanOrEqual*
  nameWithType.vb: Maybe(Of T).GreaterThanOrEqual(Maybe(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).GreaterThanOrEqual(MaybeSharp.Maybe(Of T), T)
  name.vb: GreaterThanOrEqual(Maybe(Of T), T)
- uid: MaybeSharp.Maybe`1.op_Implicit(`0)~MaybeSharp.Maybe{`0}
  commentId: M:MaybeSharp.Maybe`1.op_Implicit(`0)~MaybeSharp.Maybe{`0}
  id: op_Implicit(`0)~MaybeSharp.Maybe{`0}
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Implicit(T to Maybe<T>)
  nameWithType: Maybe<T>.Implicit(T to Maybe<T>)
  fullName: MaybeSharp.Maybe<T>.Implicit(T to MaybeSharp.Maybe<T>)
  type: Operator
  source:
    id: op_Implicit
    path: ''
    startLine: 655
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nAllows implicit conversion from {T} to a Maybe{T} instance.\n"
  example: []
  syntax:
    content: public static implicit operator Maybe<T>(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The {T} to cast to.
    return:
      type: MaybeSharp.Maybe`1
    content.vb: Public Shared Widening Operator CType(value As T) As Maybe(Of T)
  overload: MaybeSharp.Maybe`1.op_Implicit*
  nameWithType.vb: Maybe(Of T).Widening(T to Maybe(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).Widening(T to MaybeSharp.Maybe(Of T))
  name.vb: Widening(T to Maybe(Of T))
- uid: MaybeSharp.Maybe`1.op_Explicit(MaybeSharp.Maybe{`0})~`0
  commentId: M:MaybeSharp.Maybe`1.op_Explicit(MaybeSharp.Maybe{`0})~`0
  id: op_Explicit(MaybeSharp.Maybe{`0})~`0
  parent: MaybeSharp.Maybe`1
  langs:
  - csharp
  - vb
  name: Explicit(Maybe<T> to T)
  nameWithType: Maybe<T>.Explicit(Maybe<T> to T)
  fullName: MaybeSharp.Maybe<T>.Explicit(MaybeSharp.Maybe<T> to T)
  type: Operator
  source:
    id: op_Explicit
    path: ''
    startLine: 667
  assemblies:
  - cs.temp.dll
  namespace: MaybeSharp
  summary: "\nExplicitly converts a Maybe{T} to it&apos;s {T} value if it is non-empty, otherwise throws an <see cref=\"!:InvalidOperationException\"></see>.\n"
  example: []
  syntax:
    content: public static explicit operator T(Maybe<T> maybeValue)
    parameters:
    - id: maybeValue
      type: MaybeSharp.Maybe`1
      description: The Maybe{T} to cast to.
    return:
      type: '{T}'
    content.vb: Public Shared Narrowing Operator CType(maybeValue As Maybe(Of T)) As T
  overload: MaybeSharp.Maybe`1.op_Explicit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if <xref href="MaybeSharp.Maybe%601.IsEmpty" data-throw-if-not-resolved="false"></xref> is true.
  nameWithType.vb: Maybe(Of T).Narrowing(Maybe(Of T) to T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MaybeSharp.Maybe(Of T).Narrowing(MaybeSharp.Maybe(Of T) to T)
  name.vb: Narrowing(Maybe(Of T) to T)
references:
- uid: MaybeSharp
  commentId: N:MaybeSharp
  isExternal: false
  name: MaybeSharp
  nameWithType: MaybeSharp
  fullName: MaybeSharp
- uid: IEquatable{MaybeSharp.Maybe`1}
  commentId: '!:IEquatable{MaybeSharp.Maybe`1}'
  definition: IEquatable`1
  name: IEquatable<Maybe<T>>
  nameWithType: IEquatable<Maybe<T>>
  fullName: IEquatable<MaybeSharp.Maybe<T>>
  nameWithType.vb: IEquatable(Of Maybe(Of T))
  fullName.vb: IEquatable(Of MaybeSharp.Maybe(Of T))
  name.vb: IEquatable(Of Maybe(Of T))
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IFormattable
  commentId: '!:IFormattable'
  isExternal: true
  name: IFormattable
  nameWithType: IFormattable
  fullName: IFormattable
- uid: IComparable
  commentId: '!:IComparable'
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: IComparable
- uid: IComparable{MaybeSharp.Maybe`1}
  commentId: '!:IComparable{MaybeSharp.Maybe`1}'
  definition: IComparable`1
  name: IComparable<Maybe<T>>
  nameWithType: IComparable<Maybe<T>>
  fullName: IComparable<MaybeSharp.Maybe<T>>
  nameWithType.vb: IComparable(Of Maybe(Of T))
  fullName.vb: IComparable(Of MaybeSharp.Maybe(Of T))
  name.vb: IComparable(Of Maybe(Of T))
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IComparable{{T}}
  commentId: '!:IComparable{`0}'
  definition: IComparable`1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable`1
  commentId: '!:IEquatable`1'
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IComparable`1
  isExternal: true
  name: IComparable<>
  nameWithType: IComparable<>
  fullName: IComparable<>
  nameWithType.vb: IComparable(Of )
  fullName.vb: IComparable(Of )
  name.vb: IComparable(Of )
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: MaybeSharp.Maybe`1
  commentId: T:MaybeSharp.Maybe`1
  parent: MaybeSharp
  isExternal: false
  name: Maybe<T>
  nameWithType: Maybe<T>
  fullName: MaybeSharp.Maybe<T>
  nameWithType.vb: Maybe(Of T)
  fullName.vb: MaybeSharp.Maybe(Of T)
  name.vb: Maybe(Of T)
  spec.csharp:
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp.Maybe`1.#ctor*
  commentId: Overload:MaybeSharp.Maybe`1.#ctor
  isExternal: false
  name: Maybe
  nameWithType: Maybe<T>.Maybe
  fullName: MaybeSharp.Maybe<T>.Maybe
  nameWithType.vb: Maybe(Of T).Maybe
  fullName.vb: MaybeSharp.Maybe(Of T).Maybe
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: MaybeSharp.Maybe`1.IsEmpty
  commentId: P:MaybeSharp.Maybe`1.IsEmpty
- uid: MaybeSharp.Maybe`1.IsEmpty*
  commentId: Overload:MaybeSharp.Maybe`1.IsEmpty
  isExternal: false
  name: IsEmpty
  nameWithType: Maybe<T>.IsEmpty
  fullName: MaybeSharp.Maybe<T>.IsEmpty
  nameWithType.vb: Maybe(Of T).IsEmpty
  fullName.vb: MaybeSharp.Maybe(Of T).IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MaybeSharp.Maybe`1.Value
  commentId: P:MaybeSharp.Maybe`1.Value
- uid: MaybeSharp.Maybe`1.HasValue*
  commentId: Overload:MaybeSharp.Maybe`1.HasValue
  isExternal: false
  name: HasValue
  nameWithType: Maybe<T>.HasValue
  fullName: MaybeSharp.Maybe<T>.HasValue
  nameWithType.vb: Maybe(Of T).HasValue
  fullName.vb: MaybeSharp.Maybe(Of T).HasValue
- uid: MaybeSharp.Maybe`1.HasValue
  commentId: P:MaybeSharp.Maybe`1.HasValue
- uid: MaybeSharp.Maybe`1.Value*
  commentId: Overload:MaybeSharp.Maybe`1.Value
  isExternal: false
  name: Value
  nameWithType: Maybe<T>.Value
  fullName: MaybeSharp.Maybe<T>.Value
  nameWithType.vb: Maybe(Of T).Value
  fullName.vb: MaybeSharp.Maybe(Of T).Value
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: MaybeSharp.Maybe`1.Bind*
  commentId: Overload:MaybeSharp.Maybe`1.Bind
  isExternal: false
  name: Bind
  nameWithType: Maybe<T>.Bind
  fullName: MaybeSharp.Maybe<T>.Bind
  nameWithType.vb: Maybe(Of T).Bind
  fullName.vb: MaybeSharp.Maybe(Of T).Bind
- uid: Func{{T},MaybeSharp.Maybe`1}
  commentId: '!:Func{`0,MaybeSharp.Maybe`1}'
  definition: Func`2
  name: Func<T, Maybe<T>>
  nameWithType: Func<T, Maybe<T>>
  fullName: Func<T, MaybeSharp.Maybe<T>>
  nameWithType.vb: Func(Of T, Maybe(Of T))
  fullName.vb: Func(Of T, MaybeSharp.Maybe(Of T))
  name.vb: Func(Of T, Maybe(Of T))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{T},MaybeSharp.Maybe{{TResult}}}
  commentId: '!:Func{`0,MaybeSharp.Maybe{``0}}'
  definition: Func`2
  name: Func<T, Maybe<TResult>>
  nameWithType: Func<T, Maybe<TResult>>
  fullName: Func<T, MaybeSharp.Maybe<TResult>>
  nameWithType.vb: Func(Of T, Maybe(Of TResult))
  fullName.vb: Func(Of T, MaybeSharp.Maybe(Of TResult))
  name.vb: Func(Of T, Maybe(Of TResult))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp.Maybe{{TResult}}
  commentId: T:MaybeSharp.Maybe{``0}
  parent: MaybeSharp
  definition: MaybeSharp.Maybe`1
  name: Maybe<TResult>
  nameWithType: Maybe<TResult>
  fullName: MaybeSharp.Maybe<TResult>
  nameWithType.vb: Maybe(Of TResult)
  fullName.vb: MaybeSharp.Maybe(Of TResult)
  name.vb: Maybe(Of TResult)
  spec.csharp:
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MaybeSharp.Maybe`1
    name: Maybe
    nameWithType: Maybe
    fullName: MaybeSharp.Maybe
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp.Maybe`1.Cast*
  commentId: Overload:MaybeSharp.Maybe`1.Cast
  isExternal: false
  name: Cast
  nameWithType: Maybe<T>.Cast
  fullName: MaybeSharp.Maybe<T>.Cast
  nameWithType.vb: Maybe(Of T).Cast
  fullName.vb: MaybeSharp.Maybe(Of T).Cast
- uid: MaybeSharp.Maybe`1.As*
  commentId: Overload:MaybeSharp.Maybe`1.As
  isExternal: false
  name: As
  nameWithType: Maybe<T>.As
  fullName: MaybeSharp.Maybe<T>.As
  nameWithType.vb: Maybe(Of T).As
  fullName.vb: MaybeSharp.Maybe(Of T).As
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp.Maybe`1.ToString*
  commentId: Overload:MaybeSharp.Maybe`1.ToString
  isExternal: false
  name: ToString
  nameWithType: Maybe<T>.ToString
  fullName: MaybeSharp.Maybe<T>.ToString
  nameWithType.vb: Maybe(Of T).ToString
  fullName.vb: MaybeSharp.Maybe(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp.Maybe`1.GetHashCode*
  commentId: Overload:MaybeSharp.Maybe`1.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Maybe<T>.GetHashCode
  fullName: MaybeSharp.Maybe<T>.GetHashCode
  nameWithType.vb: Maybe(Of T).GetHashCode
  fullName.vb: MaybeSharp.Maybe(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MaybeSharp.Maybe`1.Equals(MaybeSharp.Maybe{`0})
  commentId: M:MaybeSharp.Maybe`1.Equals(MaybeSharp.Maybe{`0})
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MaybeSharp.Maybe`1.Equals*
  commentId: Overload:MaybeSharp.Maybe`1.Equals
  isExternal: false
  name: Equals
  nameWithType: Maybe<T>.Equals
  fullName: MaybeSharp.Maybe<T>.Equals
  nameWithType.vb: Maybe(Of T).Equals
  fullName.vb: MaybeSharp.Maybe(Of T).Equals
- uid: MaybeSharp.Maybe`1.ToString
  commentId: M:MaybeSharp.Maybe`1.ToString
- uid: IFormatProvider
  commentId: '!:IFormatProvider'
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: IFormatProvider
- uid: MaybeSharp.Maybe`1.CompareTo*
  commentId: Overload:MaybeSharp.Maybe`1.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: Maybe<T>.CompareTo
  fullName: MaybeSharp.Maybe<T>.CompareTo
  nameWithType.vb: Maybe(Of T).CompareTo
  fullName.vb: MaybeSharp.Maybe(Of T).CompareTo
- uid: MaybeSharp.Maybe`1.op_Equality*
  commentId: Overload:MaybeSharp.Maybe`1.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Maybe<T>.Equality
  fullName: MaybeSharp.Maybe<T>.Equality
  nameWithType.vb: Maybe(Of T).Equality
  fullName.vb: MaybeSharp.Maybe(Of T).Equality
- uid: MaybeSharp.Maybe`1.op_Inequality*
  commentId: Overload:MaybeSharp.Maybe`1.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Maybe<T>.Inequality
  fullName: MaybeSharp.Maybe<T>.Inequality
  nameWithType.vb: Maybe(Of T).Inequality
  fullName.vb: MaybeSharp.Maybe(Of T).Inequality
- uid: MaybeSharp.Maybe`1.op_GreaterThan*
  commentId: Overload:MaybeSharp.Maybe`1.op_GreaterThan
  isExternal: false
  name: GreaterThan
  nameWithType: Maybe<T>.GreaterThan
  fullName: MaybeSharp.Maybe<T>.GreaterThan
  nameWithType.vb: Maybe(Of T).GreaterThan
  fullName.vb: MaybeSharp.Maybe(Of T).GreaterThan
- uid: MaybeSharp.Maybe`1.op_LessThan*
  commentId: Overload:MaybeSharp.Maybe`1.op_LessThan
  isExternal: false
  name: LessThan
  nameWithType: Maybe<T>.LessThan
  fullName: MaybeSharp.Maybe<T>.LessThan
  nameWithType.vb: Maybe(Of T).LessThan
  fullName.vb: MaybeSharp.Maybe(Of T).LessThan
- uid: MaybeSharp.Maybe`1.op_GreaterThanOrEqual*
  commentId: Overload:MaybeSharp.Maybe`1.op_GreaterThanOrEqual
  isExternal: false
  name: GreaterThanOrEqual
  nameWithType: Maybe<T>.GreaterThanOrEqual
  fullName: MaybeSharp.Maybe<T>.GreaterThanOrEqual
  nameWithType.vb: Maybe(Of T).GreaterThanOrEqual
  fullName.vb: MaybeSharp.Maybe(Of T).GreaterThanOrEqual
- uid: MaybeSharp.Maybe`1.op_LessThanOrEqual*
  commentId: Overload:MaybeSharp.Maybe`1.op_LessThanOrEqual
  isExternal: false
  name: LessThanOrEqual
  nameWithType: Maybe<T>.LessThanOrEqual
  fullName: MaybeSharp.Maybe<T>.LessThanOrEqual
  nameWithType.vb: Maybe(Of T).LessThanOrEqual
  fullName.vb: MaybeSharp.Maybe(Of T).LessThanOrEqual
- uid: MaybeSharp.Maybe`1.op_Implicit*
  commentId: Overload:MaybeSharp.Maybe`1.op_Implicit
  isExternal: false
  name: Implicit
  nameWithType: Maybe<T>.Implicit
  fullName: MaybeSharp.Maybe<T>.Implicit
  nameWithType.vb: Maybe(Of T).Widening
  fullName.vb: MaybeSharp.Maybe(Of T).Widening
  name.vb: Widening
- uid: MaybeSharp.Maybe`1.op_Explicit*
  commentId: Overload:MaybeSharp.Maybe`1.op_Explicit
  isExternal: false
  name: Explicit
  nameWithType: Maybe<T>.Explicit
  fullName: MaybeSharp.Maybe<T>.Explicit
  nameWithType.vb: Maybe(Of T).Narrowing
  fullName.vb: MaybeSharp.Maybe(Of T).Narrowing
  name.vb: Narrowing
